{
  "info": {
    "name": "Business Project Dashboard API",
    "description": "Comprehensive test collection for Dashboard API endpoints providing real-time inventory statistics and analytics",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000",
      "type": "string"
    },
    {
      "key": "dashboardPath",
      "value": "/api/dashboard",
      "type": "string"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "pm.globals.set('timestamp', new Date().toISOString());"
        ],
        "type": "text/javascript"
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Content-Type is JSON', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});",
          "",
          "pm.test('Response has success property', function () {",
          "    const responseJson = pm.response.json();",
          "    pm.expect(responseJson).to.have.property('success');",
          "    pm.expect(responseJson.success).to.be.true;",
          "});"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "item": [
    {
      "name": "Dashboard Stats",
      "item": [
        {
          "name": "Get Dashboard Stats (Default 7 days)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success');",
                  "    pm.expect(responseJson).to.have.property('period');",
                  "    pm.expect(responseJson).to.have.property('overallInventory');",
                  "    pm.expect(responseJson).to.have.property('detailed');",
                  "});",
                  "",
                  "pm.test('Overall inventory has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const inventory = responseJson.overallInventory;",
                  "    ",
                  "    pm.expect(inventory).to.have.property('categories');",
                  "    pm.expect(inventory).to.have.property('totalProducts');",
                  "    pm.expect(inventory).to.have.property('topSelling');",
                  "    pm.expect(inventory).to.have.property('lowStocks');",
                  "});",
                  "",
                  "pm.test('Detailed stats are comprehensive', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const detailed = responseJson.detailed;",
                  "    ",
                  "    pm.expect(detailed).to.have.property('products');",
                  "    pm.expect(detailed).to.have.property('inventory');",
                  "    pm.expect(detailed).to.have.property('sales');",
                  "    pm.expect(detailed).to.have.property('topProducts');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{dashboardPath}}/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "dashboard", "stats"]
            },
            "description": "Get comprehensive dashboard statistics with default 7-day period"
          }
        },
        {
          "name": "Get Dashboard Stats (30 days)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Custom period is reflected in response', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.period).to.include('30');",
                  "});",
                  "",
                  "pm.test('Data covers 30-day period', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.overallInventory.lastDays).to.equal(30);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{dashboardPath}}/stats?days=30",
              "host": ["{{baseUrl}}"],
              "path": ["api", "dashboard", "stats"],
              "query": [
                {
                  "key": "days",
                  "value": "30"
                }
              ]
            },
            "description": "Get dashboard statistics for the last 30 days"
          }
        },
        {
          "name": "Get Dashboard Stats (1 day)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Single day period works', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.period).to.include('1');",
                  "    pm.expect(responseJson.overallInventory.lastDays).to.equal(1);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{dashboardPath}}/stats?days=1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "dashboard", "stats"],
              "query": [
                {
                  "key": "days",
                  "value": "1"
                }
              ]
            },
            "description": "Get dashboard statistics for the last 1 day"
          }
        }
      ],
      "description": "Test dashboard statistics endpoint with various time periods"
    },
    {
      "name": "Inventory Summary",
      "item": [
        {
          "name": "Get Inventory Summary",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response matches UI format', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('overallInventory');",
                  "    ",
                  "    const inventory = responseJson.overallInventory;",
                  "    pm.expect(inventory.categories).to.have.property('count');",
                  "    pm.expect(inventory.categories).to.have.property('period');",
                  "    pm.expect(inventory.totalProducts).to.have.property('count');",
                  "    pm.expect(inventory.totalProducts).to.have.property('revenue');",
                  "});",
                  "",
                  "pm.test('Updated timestamp is recent', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('updatedAt');",
                  "    ",
                  "    const updateTime = new Date(responseJson.updatedAt);",
                  "    const now = new Date();",
                  "    const diffMinutes = (now - updateTime) / 1000 / 60;",
                  "    pm.expect(diffMinutes).to.be.below(5); // Within 5 minutes",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{dashboardPath}}/inventory-summary",
              "host": ["{{baseUrl}}"],
              "path": ["api", "dashboard", "inventory-summary"]
            },
            "description": "Get inventory summary formatted for frontend dashboard UI"
          }
        },
        {
          "name": "Get Inventory Summary (Custom Period)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Custom period reflected in summary', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.period).to.include('14');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{dashboardPath}}/inventory-summary?days=14",
              "host": ["{{baseUrl}}"],
              "path": ["api", "dashboard", "inventory-summary"],
              "query": [
                {
                  "key": "days",
                  "value": "14"
                }
              ]
            },
            "description": "Get inventory summary for custom 14-day period"
          }
        }
      ],
      "description": "Test inventory summary endpoint for frontend dashboard integration"
    },
    {
      "name": "Trends Data",
      "item": [
        {
          "name": "Get Trends Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Trends data structure is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('dailyTrends');",
                  "    pm.expect(responseJson).to.have.property('categoryTrends');",
                  "    pm.expect(responseJson.dailyTrends).to.be.an('array');",
                  "    pm.expect(responseJson.categoryTrends).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Daily trends have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.dailyTrends.length > 0) {",
                  "        const trend = responseJson.dailyTrends[0];",
                  "        pm.expect(trend).to.have.property('_id');",
                  "        pm.expect(trend).to.have.property('orders');",
                  "        pm.expect(trend).to.have.property('revenue');",
                  "        pm.expect(trend).to.have.property('quantity');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Category trends have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.categoryTrends.length > 0) {",
                  "        const categoryTrend = responseJson.categoryTrends[0];",
                  "        pm.expect(categoryTrend).to.have.property('_id');",
                  "        pm.expect(categoryTrend).to.have.property('totalProducts');",
                  "        pm.expect(categoryTrend).to.have.property('inStock');",
                  "        pm.expect(categoryTrend).to.have.property('lowStock');",
                  "        pm.expect(categoryTrend).to.have.property('outOfStock');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{dashboardPath}}/trends",
              "host": ["{{baseUrl}}"],
              "path": ["api", "dashboard", "trends"]
            },
            "description": "Get trending data for dashboard charts and analytics"
          }
        },
        {
          "name": "Get Trends Data (90 days)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Long period trends work', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.period).to.include('90');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{dashboardPath}}/trends?days=90",
              "host": ["{{baseUrl}}"],
              "path": ["api", "dashboard", "trends"],
              "query": [
                {
                  "key": "days",
                  "value": "90"
                }
              ]
            },
            "description": "Get trends data for 90-day period for long-term analysis"
          }
        }
      ],
      "description": "Test trends endpoint for chart data and analytics"
    },
    {
      "name": "Live Status",
      "item": [
        {
          "name": "Get Live Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Live status has real-time data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('timestamp');",
                  "    pm.expect(responseJson).to.have.property('inventory');",
                  "    pm.expect(responseJson).to.have.property('orders');",
                  "    ",
                  "    // Check timestamp is recent (within last minute)",
                  "    const timestamp = new Date(responseJson.timestamp);",
                  "    const now = new Date();",
                  "    const diffMinutes = (now - timestamp) / 1000 / 60;",
                  "    pm.expect(diffMinutes).to.be.below(1);",
                  "});",
                  "",
                  "pm.test('Inventory status is complete', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const inventory = responseJson.inventory;",
                  "    ",
                  "    pm.expect(inventory).to.have.property('total');",
                  "    pm.expect(inventory).to.have.property('active');",
                  "    pm.expect(inventory).to.have.property('inStock');",
                  "    pm.expect(inventory).to.have.property('lowStock');",
                  "    pm.expect(inventory).to.have.property('outOfStock');",
                  "});",
                  "",
                  "pm.test('Orders status is present', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const orders = responseJson.orders;",
                  "    ",
                  "    pm.expect(orders).to.have.property('total');",
                  "    pm.expect(orders).to.have.property('pending');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{dashboardPath}}/live-status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "dashboard", "live-status"]
            },
            "description": "Get real-time inventory and order status for live dashboard updates"
          }
        },
        {
          "name": "Live Status - Multiple Requests",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Consistent real-time data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    ",
                  "    // Store response in environment for comparison",
                  "    pm.environment.set('lastLiveStatus', JSON.stringify(responseJson));",
                  "    ",
                  "    pm.expect(responseJson.inventory.total).to.be.a('number');",
                  "    pm.expect(responseJson.inventory.total).to.be.at.least(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{dashboardPath}}/live-status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "dashboard", "live-status"]
            },
            "description": "Test consistency of live status across multiple requests"
          }
        }
      ],
      "description": "Test live status endpoint for real-time dashboard updates"
    },
    {
      "name": "Error Handling",
      "item": [
        {
          "name": "Invalid Endpoint",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Returns 404 for invalid endpoint', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{dashboardPath}}/invalid-endpoint",
              "host": ["{{baseUrl}}"],
              "path": ["api", "dashboard", "invalid-endpoint"]
            },
            "description": "Test error handling for non-existent endpoints"
          }
        },
        {
          "name": "Invalid Query Parameter",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Handles invalid days parameter gracefully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    // Should default to 7 days when invalid parameter provided",
                  "    pm.expect(responseJson.overallInventory.lastDays).to.equal(7);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{dashboardPath}}/stats?days=invalid",
              "host": ["{{baseUrl}}"],
              "path": ["api", "dashboard", "stats"],
              "query": [
                {
                  "key": "days",
                  "value": "invalid"
                }
              ]
            },
            "description": "Test handling of invalid query parameters"
          }
        },
        {
          "name": "Negative Days Parameter",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Handles negative days parameter', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    // Should default to 7 days when negative parameter provided",
                  "    pm.expect(responseJson.overallInventory.lastDays).to.equal(7);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{dashboardPath}}/stats?days=-5",
              "host": ["{{baseUrl}}"],
              "path": ["api", "dashboard", "stats"],
              "query": [
                {
                  "key": "days",
                  "value": "-5"
                }
              ]
            },
            "description": "Test handling of negative days parameter"
          }
        }
      ],
      "description": "Test error handling and edge cases for dashboard API"
    },
    {
      "name": "Performance Tests",
      "item": [
        {
          "name": "Dashboard Stats Performance",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Dashboard stats response time under 2 seconds', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response size is reasonable', function () {",
                  "    const responseSize = pm.response.headers.get('Content-Length');",
                  "    if (responseSize) {",
                  "        pm.expect(parseInt(responseSize)).to.be.below(100000); // Less than 100KB",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{dashboardPath}}/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "dashboard", "stats"]
            },
            "description": "Test performance benchmarks for dashboard stats endpoint"
          }
        },
        {
          "name": "Live Status Performance",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Live status response time under 500ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});",
                  "",
                  "pm.test('Live status is truly fast', function () {",
                  "    // This endpoint should be optimized for real-time updates",
                  "    pm.expect(pm.response.responseTime).to.be.below(300);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{dashboardPath}}/live-status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "dashboard", "live-status"]
            },
            "description": "Test performance benchmarks for live status endpoint"
          }
        }
      ],
      "description": "Performance and load testing for dashboard endpoints"
    }
  ]
}
